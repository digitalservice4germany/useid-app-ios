name: Create Production Version
on:
  push:
    branches:
      - 'release/**'

jobs:
  dependencies:
    runs-on: self-hosted
    steps:
      - name: Setup shell
        run: |
          echo "/Users/ds-build-1/.rbenv/shims" >> $GITHUB_PATH
          eval "$(/opt/homebrew/bin/brew shellenv)"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Restore Dependencies
        uses: actions/cache@v2
        id: cache-dependencies
        env:
          cache-name: cache-dependencies
        with:
          path: |
            vendor
            .bundle
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('Gemfile.lock') }}        
      - name: Install dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: bundle install --path=vendor
      - name: Brew bundle
        run: brew bundle --no-lock
      - name: Save Dependencies
        uses: actions/cache@v2
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        env:
          cache-name: cache-dependencies
        with:
          path: |
            vendor
            .bundle
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('Gemfile.lock') }}
          
  testFlight:
    runs-on: self-hosted
    needs: dependencies
    steps:
      - name: Setup shell
        run: |
          echo "/Users/ds-build-1/.rbenv/shims" >> $GITHUB_PATH
          eval "$(/opt/homebrew/bin/brew shellenv)"
      - name: Check out repository code
        uses: actions/checkout@v2            
      - name: Restore Dependencies
        uses: actions/cache@v2
        id: cache-dependencies
        env:
          cache-name: cache-dependencies
        with:
          path: |
            vendor
            .bundle
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('Gemfile.lock') }}  
      - name: Install the Apple certificate and provisioning profile
        env:
          DISTRIBUTION_CERTIFICATE_P12_BASE64: ${{ secrets.DISTRIBUTION_CERTIFICATE_P12_BASE64 }}
          DISTRIBUTION_CERTIFICATE_P12_PASSWORD: ${{ secrets.DISTRIBUTION_CERTIFICATE_P12_PASSWORD }}
          DISTRIBUTION_PROVISIONING_PROFILE_BASE64: ${{ secrets.PRODUCTION_DISTRIBUTION_PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          APPSTORECONNECT_API_KEY_JSON: ${{ secrets.APPSTORECONNECT_API_KEY_JSON }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          APPSTORECONNECT_API_KEY_PATH=$RUNNER_TEMP/api_key.json

          # import certificate and provisioning profile from secrets
          echo -n "$DISTRIBUTION_CERTIFICATE_P12_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$DISTRIBUTION_PROVISIONING_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import fastlane/AppleWWDRCAG3.cer -A -t cert -k $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$DISTRIBUTION_CERTIFICATE_P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

          echo -n "$APPSTORECONNECT_API_KEY_JSON" > $APPSTORECONNECT_API_KEY_PATH

          echo "KEYCHAIN_PATH=$KEYCHAIN_PATH" >> $GITHUB_ENV
          echo "PP_PATH=$PP_PATH" >> $GITHUB_ENV
          echo "APPSTORECONNECT_API_KEY_PATH=$APPSTORECONNECT_API_KEY_PATH" >> $GITHUB_ENV
      - name: fastlane release testflight
        env:
          APPSTORECONNECT_API_KEY_PATH: ${{ env.APPSTORECONNECT_API_KEY_PATH }}
          KEYCHAIN_PATH: ${{ env.KEYCHAIN_PATH }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          PP_PATH: ${{ env.PP_PATH }}
        run: bundle exec fastlane release
      - name: Upload xcarchive
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: UseID.xcarchive.zip
          path: artifacts/*.xcarchive.zip
          if-no-files-found: error
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision