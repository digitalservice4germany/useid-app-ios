# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

default_platform(:ios)

PROJECT_FILENAME = "BundID"

platform :ios do

  before_all do
    ENV["LC_ALL"] = "de_DE.UTF-8"
    ENV["LANG"] = "de_DE.UTF-8"

    ENV["FASTLANE_SKIP_UPDATE_CHECK"] = "true"
  end

  desc 'Get App Version'
  lane :getAppVersion do |options|
    rel_path = options[:rel_path] || '../'
    project = Xcodeproj::Project.open("#{rel_path}#{PROJECT_FILENAME}.xcodeproj")
    version = project.build_settings('Release')['MARKETING_VERSION']
    puts "Current version: #{version}"
    version
  end

  desc "Build"
  lane :build_for_testing do
    scan(
      project: "#{PROJECT_FILENAME}.xcodeproj",
      scheme: 'BundID',
      cloned_source_packages_path: '.swift-packages',
      xcpretty_args: '--color',
      build_for_testing: true,
      output_xctestrun: true,
      clean: true,
      derived_data_path: "./DerivedData"
    )
  end

  desc "Runs unit tests without building"
  lane :test_without_building do | options |
    begin
      testPlan = options[:testplan] || "AllTests"
      run_tests(
        scheme: "BundID",
        derived_data_path: "./DerivedData",
        cloned_source_packages_path: '.swift-packages',
        test_without_building: true,
        testplan: testPlan,
        devices: ["iPhone 13"],
        skip_detect_devices: true,
        prelaunch_simulator: false,
        skip_package_dependencies_resolution: true,
        disable_package_automatic_updates: true,
        result_bundle: true,
        code_coverage: true,
        reset_simulator: true,
        app_identifier: 'de.bund.digitalservice.UseID-Preview',
        concurrent_workers: 7,
        output_style: "raw",
        output_types: "",
        number_of_retries: 0
      )
    rescue
      UI.user_error!("Tests did fail, please check logs above or BundID.xcresult.zip")
    ensure
      trainer(
        output_directory: "fastlane/test_output/",
        path: "fastlane/test_output/",
        extension: ".junit",
        fail_build: false
      )

      zip(
        path: "fastlane/test_output/BundID.xcresult",
        output_path: "fastlane/test_output/BundID.xcresult.zip",
        verbose: false
      )
    end
  end

  desc 'Test'
  lane :test do |options|
    build_for_testing(options)
    test_without_building(options)
  end

  desc 'Lint code'
  lane :lint do
    swiftlint(
      executable: "swiftlint",
      mode: :lint,
      output_file: "swiftlint.html",
      config_file: ".swiftlint.yml",
      strict: true,
      quiet: true,
      no_cache: false,
      reporter: "html"
    )
  end

  desc 'Trigger Preview'
  lane :preview do |options|
    buildPreview(options)
    deliverPreview(options)
  end

  desc 'Build Preview'
  lane :buildPreview do |_options|
    ensure_git_status_clean

    build_app(
      project: "#{PROJECT_FILENAME}.xcodeproj",
      configuration: 'Release',
      clean: true,
      scheme: 'BundID',
      cloned_source_packages_path: '.swift-packages',
      export_method: 'app-store'
    )

    version = getAppVersion
    build_number = get_build_number

    add_git_tag(tag: "#{version}-#{build_number}")
    push_to_git_remote
  end

  desc 'Deliver Preview'
  lane :deliverPreview do |options|
    make_screenshots = options[:screenshots] == true
    upload_to_testflight(api_key: ENV['APPSTORECONNECT_API_KEY'])
  end

  desc 'Bump version'
  lane :bumpVersion do
    increment_build_number

    version = getAppVersion
    build_number = get_build_number

    commit_version_bump(xcodeproj: "#{PROJECT_FILENAME}.xcodeproj")
    add_git_tag(tag: "#{version}-#{build_number}")
  end

  desc 'Update App Version'
  lane :updateAppVersion do |options|
    new_app_version = getGitBranch
    puts "Updating App version with git branch name: #{new_app_version}"
    rel_path = options[:rel_path] || '../'
    project = Xcodeproj::Project.open("#{rel_path}BundID.xcodeproj")
    project.build_configuration_list.build_configurations.each do |build_configuration|
      puts "Bumping version of #{build_configuration} from \
            #{build_configuration.build_settings['MARKETING_VERSION']} to #{new_app_version}"
      build_configuration.build_settings['MARKETING_VERSION'] = new_app_version
    end
    project.save
    puts "Saved project. Returning #{getAppVersion}"
  end

  desc "Get git branch name"
  lane :getGitBranch do |options|
    git_branch.gsub(/^.*[\\\/]/, '')
  end
end
